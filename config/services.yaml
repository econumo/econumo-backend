# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude:
      - '../src/Kernel.php'
      - '../src/EconumoBundle/Infrastructure/Symfony/Form/ValueObjectValidator.php'
      - '../src/EconumoBundle/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
      - '../src/EconumoBundle/Infrastructure/Doctrine/Migrations/**.php'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\EconumoBundle\UI\Controller\:
    resource: '../src/EconumoBundle/UI/Controller'
    tags: [ 'controller.service_arguments' ]

  App\EconumoBundle\Domain\Service\Currency\CurrencyServiceInterface:
    class: \App\EconumoBundle\Domain\Service\Currency\CurrencyService
    arguments:
      $baseCurrency: '%env(string:ECONUMO_CURRENCY_BASE)%'

  App\EconumoBundle\Domain\Service\Currency\CurrencyConvertorInterface:
    class: \App\EconumoBundle\Domain\Service\Currency\CurrencyConvertor
    arguments:
      $baseCurrency: '%env(string:ECONUMO_CURRENCY_BASE)%'

  App\EconumoBundle\Domain\Service\Currency\CurrencyRateServiceInterface:
    class: \App\EconumoBundle\Domain\Service\Currency\CurrencyRateService
    arguments:
      $baseCurrency: '%env(string:ECONUMO_CURRENCY_BASE)%'

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  App\EconumoBundle\UI\Middleware\HttpApiResponse\HttpApiExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }

  kernel.event_listener.json_request_transformer:
    class: Qandidate\Common\Symfony\HttpKernel\EventListener\JsonRequestTransformerListener
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 100 }

  App\EconumoBundle\Domain\Service\User\UserRegistrationServiceInterface:
    class: App\EconumoBundle\Domain\Service\User\UserRegistrationService
    arguments:
      $isRegistrationAllowed: '%env(bool:ECONUMO_ALLOW_REGISTRATION)%'

  App\EconumoBundle\Domain\Service\EmailServiceInterface:
    class: App\EconumoBundle\Infrastructure\Symfony\Mailer\EmailService
    arguments:
      $fromEmail: '%env(string:ECONUMO_FROM_EMAIL)%'
      $replyToEmail: '%env(string:ECONUMO_REPLY_TO_EMAIL)%'

  App\EconumoBundle\Infrastructure\Auth\AuthenticationUpdateTokenPayload:
    arguments:
      $baseCurrency: '%env(string:ECONUMO_CURRENCY_BASE)%'
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onTokenCreated }

  App\EconumoBundle\Infrastructure\Auth\AuthenticationSuccessListener:
    class: App\EconumoBundle\Infrastructure\Auth\AuthenticationSuccessListener
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

  App\EconumoBundle\UI\Middleware\ProtectSystemApi\ProtectSystemApiListener:
    class: App\EconumoBundle\UI\Middleware\ProtectSystemApi\ProtectSystemApiListener
    arguments:
      $token: '%env(ECONUMO_SYSTEM_API_KEY)%'
    tags:
      - { name: kernel.event_listener }

  App\EconumoBundle\Infrastructure\Doctrine\SQLiteForeignKeyEnabler:
    tags:
      - { name: doctrine.event_listener, event: postConnect }

  App\EconumoBundle\Domain\Service\EncodeServiceInterface:
    class: App\EconumoBundle\Domain\Service\EncodeService
    arguments:
      $econumoSalt: '%env(string:ECONUMO_DATA_SALT)%'

  App\EconumoBundle\Infrastructure\Datetime\TimezoneListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request, priority: 255 }

  App\EconumoBundle\Domain\Service\EconumoServiceInterface:
    class: App\EconumoBundle\Domain\Service\EconumoService
    arguments:
      $baseUrl: '%env(string:ECONUMO_BASE_URL)%'