on:
    workflow_call:
        inputs:
            DOCKER_IMAGE_APP:
                required: true
                type: string
        secrets:
            DOCKER_LOGIN:
                required: true
            DOCKER_PASSWORD:
                required: true
            APP_QASE_TOKEN:
                required: true

jobs:
    build_and_publish:
        name: build_and_publish
        runs-on: ubuntu-latest
        env:
            DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            DOCKER_IMAGE_APP: ${{ inputs.DOCKER_IMAGE_APP }}

        services:
            postgresql:
                image: postgres:13
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: db_test
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        steps:
            -   name: Docker login
                run: docker login -u "${DOCKER_LOGIN}" -p "${DOCKER_PASSWORD}"

            -   uses: actions/checkout@v3

            -   name: Build APP image for testing
                if: success()
                run: |
                    docker pull ${DOCKER_IMAGE_APP} || true
                    docker build --cache-from ${DOCKER_IMAGE_APP} --tag ${DOCKER_IMAGE_APP} --target test -f build/docker/app/Dockerfile .

            -   name: Test APP image
                if: success()
                run: |
                    docker run --volume shared-volume:/var/www/var --network="host" --add-host=db:127.0.0.1 ${DOCKER_IMAGE_APP} bin/console doctrine:database:create --env=test
                    docker run --volume shared-volume:/var/www/var --network="host" --add-host=db:127.0.0.1 ${DOCKER_IMAGE_APP} bin/console doctrine:migration:migrate -n --env=test
                    docker run --volume shared-volume:/var/www/var --network="host" --add-host=db:127.0.0.1 ${DOCKER_IMAGE_APP} bin/console  doctrine:schema:validate --skip-sync --env=test
                    docker run --volume shared-volume:/var/www/var --network="host" --add-host=db:127.0.0.1 ${DOCKER_IMAGE_APP} bin/console doctrine:fixtures:load --purge-with-truncate -n --env=test
                    docker run --volume shared-volume:/var/www/var --network="host" --add-host=db:127.0.0.1 --env QASE_ENABLE=${QASE_ENABLE} --env QASE_TOKEN=${QASE_TOKEN} --env QASE_PROJECT=${QASE_PROJECT} ${DOCKER_IMAGE_APP} vendor/bin/codecept run
                env:
                    QASE_ENABLE: "true"
                    QASE_TOKEN: ${{ secrets.APP_QASE_TOKEN }}
                    QASE_PROJECT: "EA"

            -   name: Build APP image for publishing
                if: success()
                run: |
                    docker build --cache-from ${DOCKER_IMAGE_APP} --tag ${DOCKER_IMAGE_APP} --target prod -f build/docker/app/Dockerfile .

            -   name: Publish DOCKER image
                if: success()
                run: |
                    docker push ${DOCKER_IMAGE_APP}